# Importa√ß√µes necess√°rias para o c√≥digo
import random
from datetime import datetime, date
from database import cursor, conn  

class Comida:
    """Classe principal para gerenciar opera√ß√µes relacionadas a alimentos"""
    
    def __init__(self, email_usuario):
        """
        Inicializa a inst√¢ncia da classe Comida
        
        Args:
            email_usuario (str): Email do usu√°rio que ser√° associado √†s opera√ß√µes
        """
        self.email_usuario = email_usuario
    
    def registrar_refeicao(self, alimento, quantidade):
        """
        Registra uma refei√ß√£o no banco de dados
        
        Args:
            alimento (str): Nome do alimento a ser registrado
            quantidade (float): Quantidade consumida em gramas
            
        Returns:
            tuple: (bool, str) Indicando sucesso/falha e mensagem correspondente
        """
        try:
            # Verifica se o alimento existe no banco de dados
            cursor.execute("SELECT calorias FROM alimentos WHERE nome = ?", (alimento,))
            resultado = cursor.fetchone()
            if not resultado:
                return False, "Alimento n√£o cadastrado"
            
            # Calcula as calorias consumidas com base na quantidade (em gramas)
            calorias = (quantidade / 100) * resultado[0]
            
            # Insere a refei√ß√£o no banco de dados com data/hora atual
            data = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('''
                INSERT INTO refeicoes (email_usuario, alimento, quantidade_gramas, calorias, data)
                VALUES (?, ?, ?, ?, ?)
            ''', (self.email_usuario, alimento, quantidade, calorias, data))
            conn.commit()
            return True, "Refei√ß√£o registrada com sucesso"
            
        except Exception as e:
            # Trata erros durante o registro
            print(f"Erro ao registrar refei√ß√£o: {e}")
            return False, f"Erro ao registrar: {str(e)}"

    def ver_refeicoes(self):
        """
        Retorna todas as refei√ß√µes registradas pelo usu√°rio
        
        Returns:
            list: Lista de tuplas com informa√ß√µes das refei√ß√µes, ordenadas por data (mais recente primeiro)
        """
        cursor.execute('''
            SELECT id, alimento, quantidade_gramas, calorias, data 
            FROM refeicoes 
            WHERE email_usuario = ?
            ORDER BY data DESC
        ''', (self.email_usuario,))
        return cursor.fetchall()

    def ver_alimentos_recomendados(self):
        """
        Exibe 4 alimentos aleat√≥rios recomendados com base na dieta do usu√°rio
        
        Obt√©m a dieta do usu√°rio do banco de dados e recomenda alimentos adequados
        """
        # Obt√©m a dieta do usu√°rio do banco de dados
        cursor.execute("SELECT dieta FROM usuarios WHERE email = ?", (self.email_usuario,))
        resultado = cursor.fetchone()
        if not resultado:
            print("‚ùå Usu√°rio n√£o encontrado.")
            return

        dieta_usuario = resultado[0]

        # Dicion√°rio com alimentos recomendados para cada tipo de dieta
        recomendacoes = {
            "Low carb": [
                "Ovos", "Abacate", "Peixes", "Nozes", "Couve-flor", "Espinafre", "Br√≥colis", "Azeite de oliva",
                "Am√™ndoas", "Queijo", "Cogumelos", "Carne bovina", "Salm√£o", "Aspargos", "Alface", "Cenoura",
                "Tomate", "Pepino", "Piment√£o", "Berinjela", "Abobrinha", "Castanha-do-par√°", "Aipo", "Azeitona",
                "Sementes de chia", "Sementes de linha√ßa", "Coco", "Framboesa", "Morango", "Repolho", "Alcachofra",
                "Cebola", "Algo", "R√∫cula", "Manjeric√£o", "Salsinha", "End√≠via", "Alcaparras", "Pimenta", "Ervilha-torta",
                "Lim√£o", "Laranja", "Carne de porco", "Frango", "Iogurte natural", "Ricota", "Ch√° verde", "√Ågua com g√°s",
                "Vinagre de ma√ß√£", "Caf√©"
            ],
            "Cetog√™nica": [
                "Bacon", "Queijo cheddar", "Carne de cordeiro", "Manteiga", "Nata", "√ìleo de coco", "Salm√£o selvagem",
                "Ovos caipiras", "Espinafre", "Couve", "Br√≥colis", "Couve-flor", "Abacate", "Nozes", "Castanhas",
                "Sementes de ab√≥bora", "Azeitonas", "Ch√° de hortel√£", "Caf√© sem a√ß√∫car", "Queijo parmes√£o",
                "Frango caipira", "Carne mo√≠da", "Camar√£o", "Atum", "Aspargos", "Abobrinha", "Cogumelos", "Algo",
                "Cebola", "Pimenta", "Ervas frescas", "Alface", "R√∫cula", "Salsa", "Manjeric√£o", "Nata fresca",
                "Creme de leite", "√ìleo MCT", "Ch√° de camomila", "Queijo mozzarella", "Carne bovina", "Carne de porco",
                "Peixes gordurosos", "Sementes de chia", "Sementes de linha√ßa", "Abacate", "Lim√£o", "Vinagre de ma√ß√£",
                "√Ågua mineral"
            ],
            "Hiperproteica": [
                "Peito de frango", "Clara de ovo", "Carne magra", "Peixes", "Queijo cottage", "Iogurte grego",
                "Atum", "Carne bovina magra", "Salm√£o", "Ovos inteiros", "Tofu", "Tempeh", "Lentilhas", "Feij√£o",
                "Quinoa", "Am√™ndoas", "Nozes", "Sementes de ab√≥bora", "Camar√£o", "Prote√≠na isolada", "Leite desnatado",
                "Ricota", "Br√≥colis", "Couve-flor", "Espinafre", "Cenoura", "Abobrinha", "Alface", "Tomate",
                "Pepino", "Piment√£o", "Azeite de oliva", "Ch√° verde", "√Ågua"
            ],
            "Bulking": [
                "Arroz integral", "Batata doce", "Aveia", "Massas integrais", "Carne vermelha", "Peito de frango",
                "Ovos", "Salm√£o", "Atum", "Quinoa", "Feij√£o", "Gr√£o-de-bico", "Lentilha", "Leite integral",
                "Iogurte natural", "Queijo", "Nozes", "Am√™ndoas", "Castanha-do-par√°", "Abacate", "Banana",
                "Morangos", "Espinafre", "Br√≥colis", "Cenoura", "Abobrinha", "Tomate", "Pepino", "Piment√£o",
                "Azeite de oliva", "Manteiga de amendoim", "Ch√° verde", "√Ågua", "Mel", "Chocolate amargo",
                "Batata inglesa", "Milho", "P√£o integral", "Sementes de chia", "Sementes de linha√ßa", "Ervilha"
            ]
        }

        # Obt√©m a lista de alimentos recomendados para a dieta do usu√°rio
        alimentos_recomendados = recomendacoes.get(dieta_usuario, [])

        if not alimentos_recomendados:
            print("‚ùå Nenhum alimento recomendado encontrado para esta dieta.")
            return

        # Seleciona 4 alimentos aleat√≥rios da lista
        aleatorios = random.sample(alimentos_recomendados, k=4)

        # Exibe os alimentos recomendados
        print(f"\nüçΩÔ∏è 4 Alimentos aleat√≥rios recomendados para a dieta {dieta_usuario}:")
        for alimento in aleatorios:
            print(f"- {alimento}")

    def ranking_alimentos_mais_consumidos(self):
        """
        Exibe um ranking dos 10 alimentos mais consumidos pelo usu√°rio (em gramas)
        
        Mostra os alimentos ordenados pela quantidade total consumida
        """
        print("\nüèÜ Ranking dos alimentos mais consumidos:")
        cursor.execute('''
            SELECT alimento, SUM(quantidade_gramas) as total_gramas
            FROM refeicoes
            WHERE email_usuario = ?
            GROUP BY alimento
            ORDER BY total_gramas DESC
            LIMIT 10
        ''', (self.email_usuario,))
        ranking = cursor.fetchall()

        if not ranking:
            print("‚ùå Nenhuma refei√ß√£o registrada para gerar o ranking.")
            return

        # Exibe o ranking formatado
        for i, (alimento, total) in enumerate(ranking, 1):
            print(f"{i}. {alimento.capitalize()} - {total:.2f} g")


class Adm_alimentar(Comida):
    """Classe para administra√ß√£o de alimentos (herda de Comida)"""
    
    @staticmethod
    def cadastrar_alimento():
        """
        Cadastra um novo alimento no banco de dados
        
        Solicita nome e calorias do alimento e insere no sistema
        """
        print("\n=== Inserir novo alimento ===")
        nome = input("Nome do alimento: ").strip().lower()
        try:
            calorias = float(input("Calorias por 100g: "))
            if calorias <= 0:
                print("‚ùå Calorias devem ser maior que zero.")
                return
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido para calorias.")
            return

        # Verifica se o alimento j√° existe
        cursor.execute("SELECT * FROM alimentos WHERE nome = ?", (nome,))
        if cursor.fetchone():
            print("‚ùå Alimento j√° cadastrado!")
            return

        # Insere o novo alimento
        cursor.execute("INSERT INTO alimentos (nome, calorias) VALUES (?, ?)", (nome, calorias))
        conn.commit()
        print(f"‚úÖ Alimento '{nome}' cadastrado com sucesso.")

    @staticmethod
    def ver_alimentos():
        """
        Lista todos os alimentos cadastrados no sistema
        
        Exibe nome e calorias por 100g de cada alimento
        """
        print("\n=== Lista de alimentos cadastrados ===")
        cursor.execute("SELECT nome, calorias FROM alimentos")
        alimentos = cursor.fetchall()
        if alimentos:
            for a in alimentos:
                print(f"- {a[0]} | {a[1]} cal por 100g")
        else:
            print("‚ùå Nenhum alimento cadastrado.")

    @staticmethod
    def excluir_alimento():
        """
        Remove um alimento do banco de dados
        
        Solicita o nome do alimento a ser removido e confirma a opera√ß√£o
        """
        print("\n=== Excluir alimento ===")
        nome = input("Nome do alimento para excluir: ").strip().lower()
        cursor.execute("SELECT * FROM alimentos WHERE nome = ?", (nome,))
        if not cursor.fetchone():
            print("‚ùå Alimento n√£o encontrado.")
            return
        cursor.execute("DELETE FROM alimentos WHERE nome = ?", (nome,))
        conn.commit()
        print(f"‚úÖ Alimento '{nome}' exclu√≠do com sucesso.")


class Registros(Comida):
    """Classe para gerenciar registros di√°rios e lembretes (herda de Comida)"""
    
    def pegar_registros_do_dia(self):
        """
        Obt√©m todos os registros alimentares do dia atual
        
        Returns:
            list: Lista de registros do dia atual
        """
        hoje = date.today()
        cursor.execute("SELECT * FROM registro_refeicoes WHERE email = ? AND data = ?", (self.email_usuario, str(hoje)))
        registros = cursor.fetchall()
        return registros

    def submenu_lembretes(self):
        """
        Exibe lembretes personalizados com base nos registros do dia
        
        Mostra alertas sobre consumo alimentar e hidrata√ß√£o
        """
        registros_diarios = self.pegar_registros_do_dia()

        print("\n--- Lembretes e Alertas ---")

        if not registros_diarios:
            print("Aten√ß√£o! Voc√™ ainda n√£o registrou nenhuma refei√ß√£o hoje. N√£o esque√ßa de se alimentar!")
        else:
            print(f"Voc√™ j√° registrou {len(registros_diarios)} refei√ß√£o(√µes) hoje. Continue assim!")

        print("Lembrete: Beba pelo menos 2 litros de √°gua ao longo do dia.")
        input("\nPressione Enter para voltar ao menu principal...")

    def encerrar_dia(self):
        """
        Calcula e exibe um resumo nutricional do dia
        
        Compara as calorias consumidas com a meta cal√≥rica baseada na dieta
        """
        print("\nüìÖ Encerramento do Dia")
        hoje = date.today().strftime("%Y-%m-%d")

        # Obt√©m dados do usu√°rio (dieta, peso, altura)
        cursor.execute("SELECT dieta, peso, altura FROM usuarios WHERE email = ?", (self.email_usuario,))
        resultado = cursor.fetchone()
        if not resultado:
            print("‚ùå Usu√°rio n√£o encontrado.")
            return
        dieta_usuario, peso, altura = resultado

        # Obt√©m todas as refei√ß√µes registradas hoje
        cursor.execute('''
            SELECT r.alimento, r.quantidade_gramas, a.calorias
            FROM refeicoes r
            JOIN alimentos a ON r.alimento = a.nome
            WHERE r.email_usuario = ? AND date(r.data) = ?
        ''', (self.email_usuario, hoje))
        refeicoes_hoje = cursor.fetchall()

        if not refeicoes_hoje:
            print("‚ùå Nenhuma refei√ß√£o registrada para hoje.")
            return

        # Calcula o total de calorias consumidas
        calorias_totais = 0
        for alimento, quantidade, cal_100g in refeicoes_hoje:
            calorias_totais += (cal_100g * quantidade) / 100

        calorias_totais = round(calorias_totais, 2)

        # Define metas cal√≥ricas baseadas no tipo de dieta
        metas = {
            "Low carb": 25 * peso,
            "Cetog√™nica": 27 * peso,
            "Hiperproteica": 30 * peso,
            "Bulking": 35 * peso
        }

        meta_calorias = metas.get(dieta_usuario, 30 * peso)

        # Exibe o resumo e feedback
        print(f"\nDieta: {dieta_usuario}")
        print(f"Calorias consumidas hoje: {calorias_totais} kcal")
        print(f"Meta cal√≥rica di√°ria aproximada: {meta_calorias} kcal")

        if calorias_totais < meta_calorias * 0.9:
            print("‚ö†Ô∏è Voc√™ consumiu menos calorias que o recomendado para sua dieta hoje.")
        elif calorias_totais > meta_calorias * 1.1:
            print("‚ö†Ô∏è Voc√™ consumiu mais calorias que o recomendado para sua dieta hoje.")
        else:
            print("‚úÖ Consumo cal√≥rico dentro da meta para hoje. Bom trabalho!")